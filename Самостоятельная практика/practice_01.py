# Пространство имен и способы вызова функции по умолчанию
# Доступ к встроенным и глобальным переменным
print('Пространство имен и способы вызова функции по умолчанию')
print('Задание 1')
a = 100
def func_sum_global():
    b = 400
    print(a + b)
func_sum_global()



print('Перекрытие имен функций')
print('Задание 2')
def func_in_func():
    d = 200
    print(d)
    def func_in_func():
        global d
        d = 400
        print(d)
        return d
    func_in_func()


func_in_func()


print('------------------------------------------------------------------------')
# Распаковка позиционных параметров
# Доступ к встроенным и глобальным переменным
print()
print('Распаковка позиционных параметров')
print('Задание 1')


list_1 = [40, 32, 20]
list_2 = [61, 70, 83]


def sum_params(*zzz):
    if len(list_1) != len(list_2):
        print('разная длинна списков')
    elif len(list_1) == len(list_2):
        for i, j in zip(list_1, list_2):
            result = (i + j)
            print(result)

print()
print('Задание 2')

# Перестановка столбцов матрицы
# Условие: Дана матрица (список списков). Напишите функцию, которая меняет местами первый и последний столбцы матрицы.
# Используйте распаковку позиционных аргументов для передачи строк матрицы во внутреннюю функцию,
# которая осуществляет перестановку элементов.

print('Перестановка столбцов матрицы')


line_0 = [[23, 16, 19, 90, 400], [78, 34, 435, 55, 21], [2, 2, 2, 2, 2]]
print(line_0)
print()
i_list = 0
i_list = line_0[0]
line_0[0] = line_0[-1]
line_0[-1] = i_list
print(line_0)




print()
print('------------------------------------------------------------------------')
print()
print()

# Произвольное число параметров

print('Произвольное число параметров')
print()
print('Задание 1')


def max_num(*nums):
    if max(nums) is None:
        print('Аргументы не вводились')
    else:
        m_x = max(*nums)
        print(m_x)

max_num(20, 30, 900, 923923)

print()
print()
print('Задание 2')

# Конкатенация строк с разделителем
# Условие: Создайте функцию, которая принимает произвольное количество строк и строку-разделитель,
# конкатенирует все строки, вставляя между ними разделитель, и возвращает результат.
# Убедитесь, что разделитель не добавляется после последней строки.


def conc(*text):
    join_star = str('   ***   '.join(text))
    print(join_star)


conc(('Ракета'), ("Котлета"), ("Бананы"), ("Компот"))


print()
print('------------------------------------------------------------------------')
print()
print('Рекурсия')
print()
from math import factorial as fa

# Факториал

n = int(input('Введите число для расчета факториала :'))

def factorial(n):
    result = fa(n)
    print(result)

factorial(n)


print()
print()
print('Задание 2')



a = int(input('Введите число для расчета последовательности :'))

def fibonacci(a):
    if a <= 1:
        return a
    else:
        return fibonacci(a-1) + fibonacci(a-2)

print(fibonacci(a))





